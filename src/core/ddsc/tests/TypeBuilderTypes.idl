/*
 * Copyright(c) 2006 to 2022 ZettaScale Technology and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
 * v. 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
 */

module TypeBuilderTypes {

  struct t1 {
    long f1;
  };

  enum en { E1, E2 };
  bitmask bm { BM1, BM2 };

  struct t2 {
    octet f1;
    char f2;
    unsigned short f3;
    @external
    short f4;
    unsigned long f5;
    long f6;
    @external
    unsigned long long f7;
    long long f8;
    boolean f9;
    @external
    string f10;
    string<10> f11;
    @external
    en f12;
    bm f13;
  };

  struct t1a {
    short f1;
  };

  struct t3 {
    t1 f1;
    t1a f2;
    t2 f3;
  };

  struct t4 {
    sequence<long> f1;
    sequence<string> f2;
    sequence<t1> f3;
  };

  typedef sequence<float, 2> td1;

  @bit_bound(4) enum en8 { EN8_1, EN8_2 };
  @bit_bound(12) bitmask bm16 { BM16_1, BM16_2 };
  union t5 switch (short) {
    case 1: char u1;
    case 2: long u2;
    case 3: string<5> u3;
    case 4: case 5: long u4;
    case 6: case 7: t1 u6;
    case 8: bm u8;
    case 9: sequence<long> u9;
    case 10: sequence<long, 3> u10;
    case 11: string u11;
    case 12: en u12;
    case 13: @external long u13;
    case 14: @external string u14;
    case 15: case 16: @external t1 u15;
    case 17: boolean u17;
    case 18: float u18;
    case 19: en8 u19;
    case 21: bm16 u20;
    case 22: td1 u21;
  };

  typedef long arr_def[300];
  typedef arr_def arr_def2[300];
  typedef sequence<arr_def> seq_def;
  typedef sequence<arr_def> seq_arr_def[2];

  struct t6 {
    long f1[2];
    char f2[1000];
    t1 f3[3];
    en f4[15];
    en8 f5[1];
    bm f6[10];
    bm16 f7[100];
    @external long f8[2];
    sequence<long> f9[10];
    arr_def f10;
    arr_def f11[3];
    arr_def2 f12;
    arr_def2 f13[6];
    seq_def f14;
    seq_def f15[5];
    seq_arr_def f16;
    seq_arr_def f17[10];
    sequence<arr_def> f18;
    sequence<seq_def> f19;
    sequence<seq_arr_def, 200> f20;
    sequence<seq_arr_def, 4> f21[3];
  };

  @nested
  struct tk1 {
    @id(2) long tk1_1;
    @id(1) long tk1_2;
  };

  @nested
  struct tk2 {
    long tk2_1;
    @id(15) @key long tk2_2;
  };

  @nested
  struct tk3n {
    long tk3n_1;
  };

  @nested
  struct tk3 {
    long tk3_1;
    tk3n tk3_2;
  };

  struct t7 {
    @id (3) @key long f1;
    @id (0) @key tk1 f2;
    @id (1) @key tk2 f3;
    @id (2) long f4;
    @id (5) @key tk3 f5;
  };

  struct t8 {
    char f1;
    @key bm f2;
    bm f3;
    @key char f4;
    char f5;
    @key en f6;
    en f7;
  };

  struct t9 {
    @optional long f1;
    @optional t8 f2;
    @optional t5 f3;
    @optional t7 f4;
  };

  // test extensibility
  // test padding at end of struct
  // test opt/ext/mu flags
  // test struct member union type
  // test union with enum discr
  // test struct inheritance
  // test hash member ids

};
